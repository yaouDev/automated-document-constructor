name: Build PDF

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - '.github/workflows/build_pdf.yml'
  workflow_dispatch: # manual trigger
  workflow_call:
    inputs:
      file_base_name:
        required: false
        type: string
        default: 'manual' # change this to your liking!!

      source_docs_path:
        required: false
        type: string
        default: 'docs'

      source_images_path:
        required: false
        type: string
        default: 'images'

    outputs:
      pdf_path:
        description: 'The full path to the generated PDF document'
        value: ${{ jobs.build_pdf.outputs.final_pdf_path }}

      artifact_url:
        description: 'URL to the workflow run artifacts'
        value: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_pdf:
    runs-on: ubuntu-latest # use static version?

    permissions:
      contents: write

    outputs:
      final_pdf_path:
        description: 'The full path to the generated versioned PDF document'
        value: ${{ steps.pandoc_compile.outputs.FINAL_PDF_CALL_PATH }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 

      - name: Set dynamic environment variables
        id: version_info
        run: |
          echo "VERSIONS_DIR=${{ vars.ARTIFACT_DIR }}/versions" >> $GITHUB_ENV
          echo "CURRENT_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "RUN_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV # used to get unique output everytime a manual is generated
          echo "Generated version suffix: ${{ env.CURRENT_DATE }}-${{ env.RUN_NUMBER }}"

      - name: Create artifacts directories
        run: |
          mkdir -p ${{ env.VERSIONS_DIR }}
          echo "Ensured directory ${{ env.VERSIONS_DIR }} exists."

      - name: Install Pandoc and LaTeX
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc texlive-latex-extra texlive-fonts-recommended

      - name: Get list of Markdown files in desired order
        id: markdown_files_list
        run: |
          FILE_LIST=$(find ${{ inputs.source_docs_path }} -name "*.md" | sort | tr '\n' ' ') # convert newlines to spaces so pandoc can read them as args
          echo "Found Markdown files for PDF compilation: $FILE_LIST"
          echo "file_list=$FILE_LIST" >> $GITHUB_OUTPUT

      - name: Compile PDF with Pandoc
        id: pandoc_compile
        run: |
          VERSIONED_PDF_FILENAME="${{ inputs.file_base_name }}-${{ env.CURRENT_DATE }}-${{ env.RUN_NUMBER }}.pdf"
          VERSIONED_PDF_FULL_PATH="${{ env.VERSIONS_DIR }}/${VERSIONED_PDF_FILENAME}"
          LATEST_PDF_FULL_PATH="${{ vars.ARTIFACT_DIR }}/${{ inputs.file_base_name }}.pdf"

          echo "VERSIONED_PDF_FULL_PATH_OUT=$VERSIONED_PDF_FULL_PATH" >> $GITHUB_ENV
          echo "LATEST_PDF_FULL_PATH_OUT=$LATEST_PDF_FULL_PATH" >> $GITHUB_ENV
          echo "VERSIONED_PDF_FILENAME_OUT=$VERSIONED_PDF_FILENAME" >> $GITHUB_ENV

          echo "FINAL_PDF_CALL_PATH=$VERSIONED_PDF_FULL_PATH" >> $GITHUB_OUTPUT

          echo "Compiling PDF as: $VERSIONED_PDF_FULL_PATH"
        
          pandoc \
            --from markdown \
            --to pdf \
            --output "$VERSIONED_PDF_FULL_PATH" \
            --table-of-contents \
            --toc-depth=3 \
            --number-sections \
            --template=./templates/template.tex \
            --variable=date:"${{ env.CURRENT_DATE }}" \
            --resource-path="./:${{ inputs.source_images_path }}"
            ${{ steps.markdown_files_list.outputs.file_list }} # the markdown documents found in previous step

          cp "$VERSIONED_PDF_FULL_PATH" "$LATEST_PDF_FULL_PATH"
          echo "Copied PDF to $LATEST_PDF_FULL_PATH"

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.VERSIONED_PDF_FILENAME_OUT }}
          path: ${{ env.VERSIONED_PDF_FULL_PATH_OUT }}
          retention-days: 1 # change if you want this to be the primary way to get your artifacts

      # Exclude blocks below this line if you do not wish the bot to push the PDFs to the repository -------------------------------------------------------

      - name: Configure Git User (Bot)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"

      - name: Commit and Push PDF to Repository
        run: |
          git add "${{ env.VERSIONED_PDF_FULL_PATH_OUT }}"
          git add "${{ env.LATEST_PDF_FULL_PATH_OUT }}"
          
          if git diff --cached --exit-code; then # check for changes
            echo "No new PDF changes to commit."
          else
            git commit -m "feat(manual): Add manual ${{ env.CURRENT_DATE }}-${{ env.RUN_NUMBER }} [skip ci]" # IMPORTANT!! do not remove skip ci or it will loop forever
            git push origin ${{ github.ref_name }} # this could be a different branch to avoid errors
            echo "Successfully pushed $PDF_FILE to the repository."
          fi
